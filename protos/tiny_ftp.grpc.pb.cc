// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: tiny_ftp.proto

#include "tiny_ftp.pb.h"
#include "tiny_ftp.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace tiny_ftp {

static const char* FtpServer_method_names[] = {
  "/tiny_ftp.FtpServer/Login",
  "/tiny_ftp.FtpServer/Logout",
  "/tiny_ftp.FtpServer/ListDirectory",
  "/tiny_ftp.FtpServer/GetWorkingDirectory",
  "/tiny_ftp.FtpServer/ChangeWorkingDirectory",
  "/tiny_ftp.FtpServer/DownloadSmallFile",
  "/tiny_ftp.FtpServer/UploadSmallFile",
};

std::unique_ptr< FtpServer::Stub> FtpServer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FtpServer::Stub> stub(new FtpServer::Stub(channel, options));
  return stub;
}

FtpServer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Login_(FtpServer_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Logout_(FtpServer_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListDirectory_(FtpServer_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetWorkingDirectory_(FtpServer_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ChangeWorkingDirectory_(FtpServer_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DownloadSmallFile_(FtpServer_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UploadSmallFile_(FtpServer_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status FtpServer::Stub::Login(::grpc::ClientContext* context, const ::tiny_ftp::User& request, ::tiny_ftp::SessionID* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tiny_ftp::User, ::tiny_ftp::SessionID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Login_, context, request, response);
}

void FtpServer::Stub::async::Login(::grpc::ClientContext* context, const ::tiny_ftp::User* request, ::tiny_ftp::SessionID* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tiny_ftp::User, ::tiny_ftp::SessionID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, std::move(f));
}

void FtpServer::Stub::async::Login(::grpc::ClientContext* context, const ::tiny_ftp::User* request, ::tiny_ftp::SessionID* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tiny_ftp::SessionID>* FtpServer::Stub::PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::tiny_ftp::User& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tiny_ftp::SessionID, ::tiny_ftp::User, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Login_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tiny_ftp::SessionID>* FtpServer::Stub::AsyncLoginRaw(::grpc::ClientContext* context, const ::tiny_ftp::User& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLoginRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FtpServer::Stub::Logout(::grpc::ClientContext* context, const ::tiny_ftp::SessionID& request, ::tiny_ftp::FtpStatus* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tiny_ftp::SessionID, ::tiny_ftp::FtpStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Logout_, context, request, response);
}

void FtpServer::Stub::async::Logout(::grpc::ClientContext* context, const ::tiny_ftp::SessionID* request, ::tiny_ftp::FtpStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tiny_ftp::SessionID, ::tiny_ftp::FtpStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Logout_, context, request, response, std::move(f));
}

void FtpServer::Stub::async::Logout(::grpc::ClientContext* context, const ::tiny_ftp::SessionID* request, ::tiny_ftp::FtpStatus* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Logout_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tiny_ftp::FtpStatus>* FtpServer::Stub::PrepareAsyncLogoutRaw(::grpc::ClientContext* context, const ::tiny_ftp::SessionID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tiny_ftp::FtpStatus, ::tiny_ftp::SessionID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Logout_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tiny_ftp::FtpStatus>* FtpServer::Stub::AsyncLogoutRaw(::grpc::ClientContext* context, const ::tiny_ftp::SessionID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLogoutRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FtpServer::Stub::ListDirectory(::grpc::ClientContext* context, const ::tiny_ftp::SessionID& request, ::tiny_ftp::Directory* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tiny_ftp::SessionID, ::tiny_ftp::Directory, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListDirectory_, context, request, response);
}

void FtpServer::Stub::async::ListDirectory(::grpc::ClientContext* context, const ::tiny_ftp::SessionID* request, ::tiny_ftp::Directory* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tiny_ftp::SessionID, ::tiny_ftp::Directory, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListDirectory_, context, request, response, std::move(f));
}

void FtpServer::Stub::async::ListDirectory(::grpc::ClientContext* context, const ::tiny_ftp::SessionID* request, ::tiny_ftp::Directory* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListDirectory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tiny_ftp::Directory>* FtpServer::Stub::PrepareAsyncListDirectoryRaw(::grpc::ClientContext* context, const ::tiny_ftp::SessionID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tiny_ftp::Directory, ::tiny_ftp::SessionID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListDirectory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tiny_ftp::Directory>* FtpServer::Stub::AsyncListDirectoryRaw(::grpc::ClientContext* context, const ::tiny_ftp::SessionID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListDirectoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FtpServer::Stub::GetWorkingDirectory(::grpc::ClientContext* context, const ::tiny_ftp::SessionID& request, ::tiny_ftp::Path* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tiny_ftp::SessionID, ::tiny_ftp::Path, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetWorkingDirectory_, context, request, response);
}

void FtpServer::Stub::async::GetWorkingDirectory(::grpc::ClientContext* context, const ::tiny_ftp::SessionID* request, ::tiny_ftp::Path* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tiny_ftp::SessionID, ::tiny_ftp::Path, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetWorkingDirectory_, context, request, response, std::move(f));
}

void FtpServer::Stub::async::GetWorkingDirectory(::grpc::ClientContext* context, const ::tiny_ftp::SessionID* request, ::tiny_ftp::Path* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetWorkingDirectory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tiny_ftp::Path>* FtpServer::Stub::PrepareAsyncGetWorkingDirectoryRaw(::grpc::ClientContext* context, const ::tiny_ftp::SessionID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tiny_ftp::Path, ::tiny_ftp::SessionID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetWorkingDirectory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tiny_ftp::Path>* FtpServer::Stub::AsyncGetWorkingDirectoryRaw(::grpc::ClientContext* context, const ::tiny_ftp::SessionID& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetWorkingDirectoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FtpServer::Stub::ChangeWorkingDirectory(::grpc::ClientContext* context, const ::tiny_ftp::ChangeInfo& request, ::tiny_ftp::FtpStatus* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tiny_ftp::ChangeInfo, ::tiny_ftp::FtpStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ChangeWorkingDirectory_, context, request, response);
}

void FtpServer::Stub::async::ChangeWorkingDirectory(::grpc::ClientContext* context, const ::tiny_ftp::ChangeInfo* request, ::tiny_ftp::FtpStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tiny_ftp::ChangeInfo, ::tiny_ftp::FtpStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ChangeWorkingDirectory_, context, request, response, std::move(f));
}

void FtpServer::Stub::async::ChangeWorkingDirectory(::grpc::ClientContext* context, const ::tiny_ftp::ChangeInfo* request, ::tiny_ftp::FtpStatus* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ChangeWorkingDirectory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tiny_ftp::FtpStatus>* FtpServer::Stub::PrepareAsyncChangeWorkingDirectoryRaw(::grpc::ClientContext* context, const ::tiny_ftp::ChangeInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tiny_ftp::FtpStatus, ::tiny_ftp::ChangeInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ChangeWorkingDirectory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tiny_ftp::FtpStatus>* FtpServer::Stub::AsyncChangeWorkingDirectoryRaw(::grpc::ClientContext* context, const ::tiny_ftp::ChangeInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncChangeWorkingDirectoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FtpServer::Stub::DownloadSmallFile(::grpc::ClientContext* context, const ::tiny_ftp::ChangeInfo& request, ::tiny_ftp::FileChunk* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tiny_ftp::ChangeInfo, ::tiny_ftp::FileChunk, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DownloadSmallFile_, context, request, response);
}

void FtpServer::Stub::async::DownloadSmallFile(::grpc::ClientContext* context, const ::tiny_ftp::ChangeInfo* request, ::tiny_ftp::FileChunk* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tiny_ftp::ChangeInfo, ::tiny_ftp::FileChunk, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DownloadSmallFile_, context, request, response, std::move(f));
}

void FtpServer::Stub::async::DownloadSmallFile(::grpc::ClientContext* context, const ::tiny_ftp::ChangeInfo* request, ::tiny_ftp::FileChunk* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DownloadSmallFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tiny_ftp::FileChunk>* FtpServer::Stub::PrepareAsyncDownloadSmallFileRaw(::grpc::ClientContext* context, const ::tiny_ftp::ChangeInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tiny_ftp::FileChunk, ::tiny_ftp::ChangeInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DownloadSmallFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tiny_ftp::FileChunk>* FtpServer::Stub::AsyncDownloadSmallFileRaw(::grpc::ClientContext* context, const ::tiny_ftp::ChangeInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDownloadSmallFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FtpServer::Stub::UploadSmallFile(::grpc::ClientContext* context, const ::tiny_ftp::FileInfo& request, ::tiny_ftp::FtpStatus* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tiny_ftp::FileInfo, ::tiny_ftp::FtpStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UploadSmallFile_, context, request, response);
}

void FtpServer::Stub::async::UploadSmallFile(::grpc::ClientContext* context, const ::tiny_ftp::FileInfo* request, ::tiny_ftp::FtpStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tiny_ftp::FileInfo, ::tiny_ftp::FtpStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UploadSmallFile_, context, request, response, std::move(f));
}

void FtpServer::Stub::async::UploadSmallFile(::grpc::ClientContext* context, const ::tiny_ftp::FileInfo* request, ::tiny_ftp::FtpStatus* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UploadSmallFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tiny_ftp::FtpStatus>* FtpServer::Stub::PrepareAsyncUploadSmallFileRaw(::grpc::ClientContext* context, const ::tiny_ftp::FileInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tiny_ftp::FtpStatus, ::tiny_ftp::FileInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UploadSmallFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tiny_ftp::FtpStatus>* FtpServer::Stub::AsyncUploadSmallFileRaw(::grpc::ClientContext* context, const ::tiny_ftp::FileInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUploadSmallFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

FtpServer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FtpServer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FtpServer::Service, ::tiny_ftp::User, ::tiny_ftp::SessionID, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FtpServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tiny_ftp::User* req,
             ::tiny_ftp::SessionID* resp) {
               return service->Login(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FtpServer_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FtpServer::Service, ::tiny_ftp::SessionID, ::tiny_ftp::FtpStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FtpServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tiny_ftp::SessionID* req,
             ::tiny_ftp::FtpStatus* resp) {
               return service->Logout(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FtpServer_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FtpServer::Service, ::tiny_ftp::SessionID, ::tiny_ftp::Directory, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FtpServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tiny_ftp::SessionID* req,
             ::tiny_ftp::Directory* resp) {
               return service->ListDirectory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FtpServer_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FtpServer::Service, ::tiny_ftp::SessionID, ::tiny_ftp::Path, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FtpServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tiny_ftp::SessionID* req,
             ::tiny_ftp::Path* resp) {
               return service->GetWorkingDirectory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FtpServer_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FtpServer::Service, ::tiny_ftp::ChangeInfo, ::tiny_ftp::FtpStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FtpServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tiny_ftp::ChangeInfo* req,
             ::tiny_ftp::FtpStatus* resp) {
               return service->ChangeWorkingDirectory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FtpServer_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FtpServer::Service, ::tiny_ftp::ChangeInfo, ::tiny_ftp::FileChunk, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FtpServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tiny_ftp::ChangeInfo* req,
             ::tiny_ftp::FileChunk* resp) {
               return service->DownloadSmallFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FtpServer_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FtpServer::Service, ::tiny_ftp::FileInfo, ::tiny_ftp::FtpStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FtpServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tiny_ftp::FileInfo* req,
             ::tiny_ftp::FtpStatus* resp) {
               return service->UploadSmallFile(ctx, req, resp);
             }, this)));
}

FtpServer::Service::~Service() {
}

::grpc::Status FtpServer::Service::Login(::grpc::ServerContext* context, const ::tiny_ftp::User* request, ::tiny_ftp::SessionID* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FtpServer::Service::Logout(::grpc::ServerContext* context, const ::tiny_ftp::SessionID* request, ::tiny_ftp::FtpStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FtpServer::Service::ListDirectory(::grpc::ServerContext* context, const ::tiny_ftp::SessionID* request, ::tiny_ftp::Directory* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FtpServer::Service::GetWorkingDirectory(::grpc::ServerContext* context, const ::tiny_ftp::SessionID* request, ::tiny_ftp::Path* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FtpServer::Service::ChangeWorkingDirectory(::grpc::ServerContext* context, const ::tiny_ftp::ChangeInfo* request, ::tiny_ftp::FtpStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FtpServer::Service::DownloadSmallFile(::grpc::ServerContext* context, const ::tiny_ftp::ChangeInfo* request, ::tiny_ftp::FileChunk* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FtpServer::Service::UploadSmallFile(::grpc::ServerContext* context, const ::tiny_ftp::FileInfo* request, ::tiny_ftp::FtpStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace tiny_ftp

