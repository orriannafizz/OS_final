// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: tiny_ftp.proto
#ifndef GRPC_tiny_5fftp_2eproto__INCLUDED
#define GRPC_tiny_5fftp_2eproto__INCLUDED

#include "tiny_ftp.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace tiny_ftp {

// Define server RPC functions
class FtpServer final {
 public:
  static constexpr char const* service_full_name() {
    return "tiny_ftp.FtpServer";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Login
    virtual ::grpc::Status Login(::grpc::ClientContext* context, const ::tiny_ftp::User& request, ::tiny_ftp::SessionID* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tiny_ftp::SessionID>> AsyncLogin(::grpc::ClientContext* context, const ::tiny_ftp::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tiny_ftp::SessionID>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tiny_ftp::SessionID>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::tiny_ftp::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tiny_ftp::SessionID>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    virtual ::grpc::Status Logout(::grpc::ClientContext* context, const ::tiny_ftp::SessionID& request, ::tiny_ftp::FtpStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tiny_ftp::FtpStatus>> AsyncLogout(::grpc::ClientContext* context, const ::tiny_ftp::SessionID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tiny_ftp::FtpStatus>>(AsyncLogoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tiny_ftp::FtpStatus>> PrepareAsyncLogout(::grpc::ClientContext* context, const ::tiny_ftp::SessionID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tiny_ftp::FtpStatus>>(PrepareAsyncLogoutRaw(context, request, cq));
    }
    // List Directory
    virtual ::grpc::Status ListDirectory(::grpc::ClientContext* context, const ::tiny_ftp::SessionID& request, ::tiny_ftp::Directory* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tiny_ftp::Directory>> AsyncListDirectory(::grpc::ClientContext* context, const ::tiny_ftp::SessionID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tiny_ftp::Directory>>(AsyncListDirectoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tiny_ftp::Directory>> PrepareAsyncListDirectory(::grpc::ClientContext* context, const ::tiny_ftp::SessionID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tiny_ftp::Directory>>(PrepareAsyncListDirectoryRaw(context, request, cq));
    }
    // Working Directory Operations
    virtual ::grpc::Status GetWorkingDirectory(::grpc::ClientContext* context, const ::tiny_ftp::SessionID& request, ::tiny_ftp::Path* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tiny_ftp::Path>> AsyncGetWorkingDirectory(::grpc::ClientContext* context, const ::tiny_ftp::SessionID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tiny_ftp::Path>>(AsyncGetWorkingDirectoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tiny_ftp::Path>> PrepareAsyncGetWorkingDirectory(::grpc::ClientContext* context, const ::tiny_ftp::SessionID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tiny_ftp::Path>>(PrepareAsyncGetWorkingDirectoryRaw(context, request, cq));
    }
    virtual ::grpc::Status ChangeWorkingDirectory(::grpc::ClientContext* context, const ::tiny_ftp::ChangeInfo& request, ::tiny_ftp::FtpStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tiny_ftp::FtpStatus>> AsyncChangeWorkingDirectory(::grpc::ClientContext* context, const ::tiny_ftp::ChangeInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tiny_ftp::FtpStatus>>(AsyncChangeWorkingDirectoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tiny_ftp::FtpStatus>> PrepareAsyncChangeWorkingDirectory(::grpc::ClientContext* context, const ::tiny_ftp::ChangeInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tiny_ftp::FtpStatus>>(PrepareAsyncChangeWorkingDirectoryRaw(context, request, cq));
    }
    // Small File Transer
    virtual ::grpc::Status DownloadSmallFile(::grpc::ClientContext* context, const ::tiny_ftp::ChangeInfo& request, ::tiny_ftp::FileChunk* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tiny_ftp::FileChunk>> AsyncDownloadSmallFile(::grpc::ClientContext* context, const ::tiny_ftp::ChangeInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tiny_ftp::FileChunk>>(AsyncDownloadSmallFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tiny_ftp::FileChunk>> PrepareAsyncDownloadSmallFile(::grpc::ClientContext* context, const ::tiny_ftp::ChangeInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tiny_ftp::FileChunk>>(PrepareAsyncDownloadSmallFileRaw(context, request, cq));
    }
    virtual ::grpc::Status UploadSmallFile(::grpc::ClientContext* context, const ::tiny_ftp::FileInfo& request, ::tiny_ftp::FtpStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tiny_ftp::FtpStatus>> AsyncUploadSmallFile(::grpc::ClientContext* context, const ::tiny_ftp::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tiny_ftp::FtpStatus>>(AsyncUploadSmallFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tiny_ftp::FtpStatus>> PrepareAsyncUploadSmallFile(::grpc::ClientContext* context, const ::tiny_ftp::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tiny_ftp::FtpStatus>>(PrepareAsyncUploadSmallFileRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Login
      virtual void Login(::grpc::ClientContext* context, const ::tiny_ftp::User* request, ::tiny_ftp::SessionID* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Login(::grpc::ClientContext* context, const ::tiny_ftp::User* request, ::tiny_ftp::SessionID* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Logout(::grpc::ClientContext* context, const ::tiny_ftp::SessionID* request, ::tiny_ftp::FtpStatus* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Logout(::grpc::ClientContext* context, const ::tiny_ftp::SessionID* request, ::tiny_ftp::FtpStatus* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // List Directory
      virtual void ListDirectory(::grpc::ClientContext* context, const ::tiny_ftp::SessionID* request, ::tiny_ftp::Directory* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListDirectory(::grpc::ClientContext* context, const ::tiny_ftp::SessionID* request, ::tiny_ftp::Directory* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Working Directory Operations
      virtual void GetWorkingDirectory(::grpc::ClientContext* context, const ::tiny_ftp::SessionID* request, ::tiny_ftp::Path* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetWorkingDirectory(::grpc::ClientContext* context, const ::tiny_ftp::SessionID* request, ::tiny_ftp::Path* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ChangeWorkingDirectory(::grpc::ClientContext* context, const ::tiny_ftp::ChangeInfo* request, ::tiny_ftp::FtpStatus* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ChangeWorkingDirectory(::grpc::ClientContext* context, const ::tiny_ftp::ChangeInfo* request, ::tiny_ftp::FtpStatus* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Small File Transer
      virtual void DownloadSmallFile(::grpc::ClientContext* context, const ::tiny_ftp::ChangeInfo* request, ::tiny_ftp::FileChunk* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DownloadSmallFile(::grpc::ClientContext* context, const ::tiny_ftp::ChangeInfo* request, ::tiny_ftp::FileChunk* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UploadSmallFile(::grpc::ClientContext* context, const ::tiny_ftp::FileInfo* request, ::tiny_ftp::FtpStatus* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UploadSmallFile(::grpc::ClientContext* context, const ::tiny_ftp::FileInfo* request, ::tiny_ftp::FtpStatus* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tiny_ftp::SessionID>* AsyncLoginRaw(::grpc::ClientContext* context, const ::tiny_ftp::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tiny_ftp::SessionID>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::tiny_ftp::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tiny_ftp::FtpStatus>* AsyncLogoutRaw(::grpc::ClientContext* context, const ::tiny_ftp::SessionID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tiny_ftp::FtpStatus>* PrepareAsyncLogoutRaw(::grpc::ClientContext* context, const ::tiny_ftp::SessionID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tiny_ftp::Directory>* AsyncListDirectoryRaw(::grpc::ClientContext* context, const ::tiny_ftp::SessionID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tiny_ftp::Directory>* PrepareAsyncListDirectoryRaw(::grpc::ClientContext* context, const ::tiny_ftp::SessionID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tiny_ftp::Path>* AsyncGetWorkingDirectoryRaw(::grpc::ClientContext* context, const ::tiny_ftp::SessionID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tiny_ftp::Path>* PrepareAsyncGetWorkingDirectoryRaw(::grpc::ClientContext* context, const ::tiny_ftp::SessionID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tiny_ftp::FtpStatus>* AsyncChangeWorkingDirectoryRaw(::grpc::ClientContext* context, const ::tiny_ftp::ChangeInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tiny_ftp::FtpStatus>* PrepareAsyncChangeWorkingDirectoryRaw(::grpc::ClientContext* context, const ::tiny_ftp::ChangeInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tiny_ftp::FileChunk>* AsyncDownloadSmallFileRaw(::grpc::ClientContext* context, const ::tiny_ftp::ChangeInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tiny_ftp::FileChunk>* PrepareAsyncDownloadSmallFileRaw(::grpc::ClientContext* context, const ::tiny_ftp::ChangeInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tiny_ftp::FtpStatus>* AsyncUploadSmallFileRaw(::grpc::ClientContext* context, const ::tiny_ftp::FileInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tiny_ftp::FtpStatus>* PrepareAsyncUploadSmallFileRaw(::grpc::ClientContext* context, const ::tiny_ftp::FileInfo& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Login(::grpc::ClientContext* context, const ::tiny_ftp::User& request, ::tiny_ftp::SessionID* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tiny_ftp::SessionID>> AsyncLogin(::grpc::ClientContext* context, const ::tiny_ftp::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tiny_ftp::SessionID>>(AsyncLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tiny_ftp::SessionID>> PrepareAsyncLogin(::grpc::ClientContext* context, const ::tiny_ftp::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tiny_ftp::SessionID>>(PrepareAsyncLoginRaw(context, request, cq));
    }
    ::grpc::Status Logout(::grpc::ClientContext* context, const ::tiny_ftp::SessionID& request, ::tiny_ftp::FtpStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tiny_ftp::FtpStatus>> AsyncLogout(::grpc::ClientContext* context, const ::tiny_ftp::SessionID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tiny_ftp::FtpStatus>>(AsyncLogoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tiny_ftp::FtpStatus>> PrepareAsyncLogout(::grpc::ClientContext* context, const ::tiny_ftp::SessionID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tiny_ftp::FtpStatus>>(PrepareAsyncLogoutRaw(context, request, cq));
    }
    ::grpc::Status ListDirectory(::grpc::ClientContext* context, const ::tiny_ftp::SessionID& request, ::tiny_ftp::Directory* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tiny_ftp::Directory>> AsyncListDirectory(::grpc::ClientContext* context, const ::tiny_ftp::SessionID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tiny_ftp::Directory>>(AsyncListDirectoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tiny_ftp::Directory>> PrepareAsyncListDirectory(::grpc::ClientContext* context, const ::tiny_ftp::SessionID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tiny_ftp::Directory>>(PrepareAsyncListDirectoryRaw(context, request, cq));
    }
    ::grpc::Status GetWorkingDirectory(::grpc::ClientContext* context, const ::tiny_ftp::SessionID& request, ::tiny_ftp::Path* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tiny_ftp::Path>> AsyncGetWorkingDirectory(::grpc::ClientContext* context, const ::tiny_ftp::SessionID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tiny_ftp::Path>>(AsyncGetWorkingDirectoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tiny_ftp::Path>> PrepareAsyncGetWorkingDirectory(::grpc::ClientContext* context, const ::tiny_ftp::SessionID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tiny_ftp::Path>>(PrepareAsyncGetWorkingDirectoryRaw(context, request, cq));
    }
    ::grpc::Status ChangeWorkingDirectory(::grpc::ClientContext* context, const ::tiny_ftp::ChangeInfo& request, ::tiny_ftp::FtpStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tiny_ftp::FtpStatus>> AsyncChangeWorkingDirectory(::grpc::ClientContext* context, const ::tiny_ftp::ChangeInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tiny_ftp::FtpStatus>>(AsyncChangeWorkingDirectoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tiny_ftp::FtpStatus>> PrepareAsyncChangeWorkingDirectory(::grpc::ClientContext* context, const ::tiny_ftp::ChangeInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tiny_ftp::FtpStatus>>(PrepareAsyncChangeWorkingDirectoryRaw(context, request, cq));
    }
    ::grpc::Status DownloadSmallFile(::grpc::ClientContext* context, const ::tiny_ftp::ChangeInfo& request, ::tiny_ftp::FileChunk* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tiny_ftp::FileChunk>> AsyncDownloadSmallFile(::grpc::ClientContext* context, const ::tiny_ftp::ChangeInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tiny_ftp::FileChunk>>(AsyncDownloadSmallFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tiny_ftp::FileChunk>> PrepareAsyncDownloadSmallFile(::grpc::ClientContext* context, const ::tiny_ftp::ChangeInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tiny_ftp::FileChunk>>(PrepareAsyncDownloadSmallFileRaw(context, request, cq));
    }
    ::grpc::Status UploadSmallFile(::grpc::ClientContext* context, const ::tiny_ftp::FileInfo& request, ::tiny_ftp::FtpStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tiny_ftp::FtpStatus>> AsyncUploadSmallFile(::grpc::ClientContext* context, const ::tiny_ftp::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tiny_ftp::FtpStatus>>(AsyncUploadSmallFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tiny_ftp::FtpStatus>> PrepareAsyncUploadSmallFile(::grpc::ClientContext* context, const ::tiny_ftp::FileInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tiny_ftp::FtpStatus>>(PrepareAsyncUploadSmallFileRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Login(::grpc::ClientContext* context, const ::tiny_ftp::User* request, ::tiny_ftp::SessionID* response, std::function<void(::grpc::Status)>) override;
      void Login(::grpc::ClientContext* context, const ::tiny_ftp::User* request, ::tiny_ftp::SessionID* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Logout(::grpc::ClientContext* context, const ::tiny_ftp::SessionID* request, ::tiny_ftp::FtpStatus* response, std::function<void(::grpc::Status)>) override;
      void Logout(::grpc::ClientContext* context, const ::tiny_ftp::SessionID* request, ::tiny_ftp::FtpStatus* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListDirectory(::grpc::ClientContext* context, const ::tiny_ftp::SessionID* request, ::tiny_ftp::Directory* response, std::function<void(::grpc::Status)>) override;
      void ListDirectory(::grpc::ClientContext* context, const ::tiny_ftp::SessionID* request, ::tiny_ftp::Directory* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetWorkingDirectory(::grpc::ClientContext* context, const ::tiny_ftp::SessionID* request, ::tiny_ftp::Path* response, std::function<void(::grpc::Status)>) override;
      void GetWorkingDirectory(::grpc::ClientContext* context, const ::tiny_ftp::SessionID* request, ::tiny_ftp::Path* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ChangeWorkingDirectory(::grpc::ClientContext* context, const ::tiny_ftp::ChangeInfo* request, ::tiny_ftp::FtpStatus* response, std::function<void(::grpc::Status)>) override;
      void ChangeWorkingDirectory(::grpc::ClientContext* context, const ::tiny_ftp::ChangeInfo* request, ::tiny_ftp::FtpStatus* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DownloadSmallFile(::grpc::ClientContext* context, const ::tiny_ftp::ChangeInfo* request, ::tiny_ftp::FileChunk* response, std::function<void(::grpc::Status)>) override;
      void DownloadSmallFile(::grpc::ClientContext* context, const ::tiny_ftp::ChangeInfo* request, ::tiny_ftp::FileChunk* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UploadSmallFile(::grpc::ClientContext* context, const ::tiny_ftp::FileInfo* request, ::tiny_ftp::FtpStatus* response, std::function<void(::grpc::Status)>) override;
      void UploadSmallFile(::grpc::ClientContext* context, const ::tiny_ftp::FileInfo* request, ::tiny_ftp::FtpStatus* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::tiny_ftp::SessionID>* AsyncLoginRaw(::grpc::ClientContext* context, const ::tiny_ftp::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tiny_ftp::SessionID>* PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::tiny_ftp::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tiny_ftp::FtpStatus>* AsyncLogoutRaw(::grpc::ClientContext* context, const ::tiny_ftp::SessionID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tiny_ftp::FtpStatus>* PrepareAsyncLogoutRaw(::grpc::ClientContext* context, const ::tiny_ftp::SessionID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tiny_ftp::Directory>* AsyncListDirectoryRaw(::grpc::ClientContext* context, const ::tiny_ftp::SessionID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tiny_ftp::Directory>* PrepareAsyncListDirectoryRaw(::grpc::ClientContext* context, const ::tiny_ftp::SessionID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tiny_ftp::Path>* AsyncGetWorkingDirectoryRaw(::grpc::ClientContext* context, const ::tiny_ftp::SessionID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tiny_ftp::Path>* PrepareAsyncGetWorkingDirectoryRaw(::grpc::ClientContext* context, const ::tiny_ftp::SessionID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tiny_ftp::FtpStatus>* AsyncChangeWorkingDirectoryRaw(::grpc::ClientContext* context, const ::tiny_ftp::ChangeInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tiny_ftp::FtpStatus>* PrepareAsyncChangeWorkingDirectoryRaw(::grpc::ClientContext* context, const ::tiny_ftp::ChangeInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tiny_ftp::FileChunk>* AsyncDownloadSmallFileRaw(::grpc::ClientContext* context, const ::tiny_ftp::ChangeInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tiny_ftp::FileChunk>* PrepareAsyncDownloadSmallFileRaw(::grpc::ClientContext* context, const ::tiny_ftp::ChangeInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tiny_ftp::FtpStatus>* AsyncUploadSmallFileRaw(::grpc::ClientContext* context, const ::tiny_ftp::FileInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tiny_ftp::FtpStatus>* PrepareAsyncUploadSmallFileRaw(::grpc::ClientContext* context, const ::tiny_ftp::FileInfo& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Login_;
    const ::grpc::internal::RpcMethod rpcmethod_Logout_;
    const ::grpc::internal::RpcMethod rpcmethod_ListDirectory_;
    const ::grpc::internal::RpcMethod rpcmethod_GetWorkingDirectory_;
    const ::grpc::internal::RpcMethod rpcmethod_ChangeWorkingDirectory_;
    const ::grpc::internal::RpcMethod rpcmethod_DownloadSmallFile_;
    const ::grpc::internal::RpcMethod rpcmethod_UploadSmallFile_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Login
    virtual ::grpc::Status Login(::grpc::ServerContext* context, const ::tiny_ftp::User* request, ::tiny_ftp::SessionID* response);
    virtual ::grpc::Status Logout(::grpc::ServerContext* context, const ::tiny_ftp::SessionID* request, ::tiny_ftp::FtpStatus* response);
    // List Directory
    virtual ::grpc::Status ListDirectory(::grpc::ServerContext* context, const ::tiny_ftp::SessionID* request, ::tiny_ftp::Directory* response);
    // Working Directory Operations
    virtual ::grpc::Status GetWorkingDirectory(::grpc::ServerContext* context, const ::tiny_ftp::SessionID* request, ::tiny_ftp::Path* response);
    virtual ::grpc::Status ChangeWorkingDirectory(::grpc::ServerContext* context, const ::tiny_ftp::ChangeInfo* request, ::tiny_ftp::FtpStatus* response);
    // Small File Transer
    virtual ::grpc::Status DownloadSmallFile(::grpc::ServerContext* context, const ::tiny_ftp::ChangeInfo* request, ::tiny_ftp::FileChunk* response);
    virtual ::grpc::Status UploadSmallFile(::grpc::ServerContext* context, const ::tiny_ftp::FileInfo* request, ::tiny_ftp::FtpStatus* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Login() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::tiny_ftp::User* /*request*/, ::tiny_ftp::SessionID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::tiny_ftp::User* request, ::grpc::ServerAsyncResponseWriter< ::tiny_ftp::SessionID>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Logout() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logout(::grpc::ServerContext* /*context*/, const ::tiny_ftp::SessionID* /*request*/, ::tiny_ftp::FtpStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogout(::grpc::ServerContext* context, ::tiny_ftp::SessionID* request, ::grpc::ServerAsyncResponseWriter< ::tiny_ftp::FtpStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListDirectory() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ListDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDirectory(::grpc::ServerContext* /*context*/, const ::tiny_ftp::SessionID* /*request*/, ::tiny_ftp::Directory* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListDirectory(::grpc::ServerContext* context, ::tiny_ftp::SessionID* request, ::grpc::ServerAsyncResponseWriter< ::tiny_ftp::Directory>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetWorkingDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetWorkingDirectory() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetWorkingDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWorkingDirectory(::grpc::ServerContext* /*context*/, const ::tiny_ftp::SessionID* /*request*/, ::tiny_ftp::Path* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWorkingDirectory(::grpc::ServerContext* context, ::tiny_ftp::SessionID* request, ::grpc::ServerAsyncResponseWriter< ::tiny_ftp::Path>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ChangeWorkingDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ChangeWorkingDirectory() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ChangeWorkingDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeWorkingDirectory(::grpc::ServerContext* /*context*/, const ::tiny_ftp::ChangeInfo* /*request*/, ::tiny_ftp::FtpStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChangeWorkingDirectory(::grpc::ServerContext* context, ::tiny_ftp::ChangeInfo* request, ::grpc::ServerAsyncResponseWriter< ::tiny_ftp::FtpStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DownloadSmallFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DownloadSmallFile() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_DownloadSmallFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadSmallFile(::grpc::ServerContext* /*context*/, const ::tiny_ftp::ChangeInfo* /*request*/, ::tiny_ftp::FileChunk* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDownloadSmallFile(::grpc::ServerContext* context, ::tiny_ftp::ChangeInfo* request, ::grpc::ServerAsyncResponseWriter< ::tiny_ftp::FileChunk>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UploadSmallFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UploadSmallFile() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_UploadSmallFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadSmallFile(::grpc::ServerContext* /*context*/, const ::tiny_ftp::FileInfo* /*request*/, ::tiny_ftp::FtpStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUploadSmallFile(::grpc::ServerContext* context, ::tiny_ftp::FileInfo* request, ::grpc::ServerAsyncResponseWriter< ::tiny_ftp::FtpStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Login<WithAsyncMethod_Logout<WithAsyncMethod_ListDirectory<WithAsyncMethod_GetWorkingDirectory<WithAsyncMethod_ChangeWorkingDirectory<WithAsyncMethod_DownloadSmallFile<WithAsyncMethod_UploadSmallFile<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Login() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::tiny_ftp::User, ::tiny_ftp::SessionID>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tiny_ftp::User* request, ::tiny_ftp::SessionID* response) { return this->Login(context, request, response); }));}
    void SetMessageAllocatorFor_Login(
        ::grpc::MessageAllocator< ::tiny_ftp::User, ::tiny_ftp::SessionID>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tiny_ftp::User, ::tiny_ftp::SessionID>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::tiny_ftp::User* /*request*/, ::tiny_ftp::SessionID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Login(
      ::grpc::CallbackServerContext* /*context*/, const ::tiny_ftp::User* /*request*/, ::tiny_ftp::SessionID* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Logout() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::tiny_ftp::SessionID, ::tiny_ftp::FtpStatus>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tiny_ftp::SessionID* request, ::tiny_ftp::FtpStatus* response) { return this->Logout(context, request, response); }));}
    void SetMessageAllocatorFor_Logout(
        ::grpc::MessageAllocator< ::tiny_ftp::SessionID, ::tiny_ftp::FtpStatus>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tiny_ftp::SessionID, ::tiny_ftp::FtpStatus>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logout(::grpc::ServerContext* /*context*/, const ::tiny_ftp::SessionID* /*request*/, ::tiny_ftp::FtpStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Logout(
      ::grpc::CallbackServerContext* /*context*/, const ::tiny_ftp::SessionID* /*request*/, ::tiny_ftp::FtpStatus* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListDirectory() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::tiny_ftp::SessionID, ::tiny_ftp::Directory>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tiny_ftp::SessionID* request, ::tiny_ftp::Directory* response) { return this->ListDirectory(context, request, response); }));}
    void SetMessageAllocatorFor_ListDirectory(
        ::grpc::MessageAllocator< ::tiny_ftp::SessionID, ::tiny_ftp::Directory>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tiny_ftp::SessionID, ::tiny_ftp::Directory>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDirectory(::grpc::ServerContext* /*context*/, const ::tiny_ftp::SessionID* /*request*/, ::tiny_ftp::Directory* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListDirectory(
      ::grpc::CallbackServerContext* /*context*/, const ::tiny_ftp::SessionID* /*request*/, ::tiny_ftp::Directory* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetWorkingDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetWorkingDirectory() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::tiny_ftp::SessionID, ::tiny_ftp::Path>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tiny_ftp::SessionID* request, ::tiny_ftp::Path* response) { return this->GetWorkingDirectory(context, request, response); }));}
    void SetMessageAllocatorFor_GetWorkingDirectory(
        ::grpc::MessageAllocator< ::tiny_ftp::SessionID, ::tiny_ftp::Path>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tiny_ftp::SessionID, ::tiny_ftp::Path>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetWorkingDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWorkingDirectory(::grpc::ServerContext* /*context*/, const ::tiny_ftp::SessionID* /*request*/, ::tiny_ftp::Path* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetWorkingDirectory(
      ::grpc::CallbackServerContext* /*context*/, const ::tiny_ftp::SessionID* /*request*/, ::tiny_ftp::Path* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ChangeWorkingDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ChangeWorkingDirectory() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::tiny_ftp::ChangeInfo, ::tiny_ftp::FtpStatus>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tiny_ftp::ChangeInfo* request, ::tiny_ftp::FtpStatus* response) { return this->ChangeWorkingDirectory(context, request, response); }));}
    void SetMessageAllocatorFor_ChangeWorkingDirectory(
        ::grpc::MessageAllocator< ::tiny_ftp::ChangeInfo, ::tiny_ftp::FtpStatus>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tiny_ftp::ChangeInfo, ::tiny_ftp::FtpStatus>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ChangeWorkingDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeWorkingDirectory(::grpc::ServerContext* /*context*/, const ::tiny_ftp::ChangeInfo* /*request*/, ::tiny_ftp::FtpStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ChangeWorkingDirectory(
      ::grpc::CallbackServerContext* /*context*/, const ::tiny_ftp::ChangeInfo* /*request*/, ::tiny_ftp::FtpStatus* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DownloadSmallFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DownloadSmallFile() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::tiny_ftp::ChangeInfo, ::tiny_ftp::FileChunk>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tiny_ftp::ChangeInfo* request, ::tiny_ftp::FileChunk* response) { return this->DownloadSmallFile(context, request, response); }));}
    void SetMessageAllocatorFor_DownloadSmallFile(
        ::grpc::MessageAllocator< ::tiny_ftp::ChangeInfo, ::tiny_ftp::FileChunk>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tiny_ftp::ChangeInfo, ::tiny_ftp::FileChunk>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DownloadSmallFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadSmallFile(::grpc::ServerContext* /*context*/, const ::tiny_ftp::ChangeInfo* /*request*/, ::tiny_ftp::FileChunk* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DownloadSmallFile(
      ::grpc::CallbackServerContext* /*context*/, const ::tiny_ftp::ChangeInfo* /*request*/, ::tiny_ftp::FileChunk* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UploadSmallFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UploadSmallFile() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::tiny_ftp::FileInfo, ::tiny_ftp::FtpStatus>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tiny_ftp::FileInfo* request, ::tiny_ftp::FtpStatus* response) { return this->UploadSmallFile(context, request, response); }));}
    void SetMessageAllocatorFor_UploadSmallFile(
        ::grpc::MessageAllocator< ::tiny_ftp::FileInfo, ::tiny_ftp::FtpStatus>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tiny_ftp::FileInfo, ::tiny_ftp::FtpStatus>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UploadSmallFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadSmallFile(::grpc::ServerContext* /*context*/, const ::tiny_ftp::FileInfo* /*request*/, ::tiny_ftp::FtpStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UploadSmallFile(
      ::grpc::CallbackServerContext* /*context*/, const ::tiny_ftp::FileInfo* /*request*/, ::tiny_ftp::FtpStatus* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Login<WithCallbackMethod_Logout<WithCallbackMethod_ListDirectory<WithCallbackMethod_GetWorkingDirectory<WithCallbackMethod_ChangeWorkingDirectory<WithCallbackMethod_DownloadSmallFile<WithCallbackMethod_UploadSmallFile<Service > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Login() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::tiny_ftp::User* /*request*/, ::tiny_ftp::SessionID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Logout() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logout(::grpc::ServerContext* /*context*/, const ::tiny_ftp::SessionID* /*request*/, ::tiny_ftp::FtpStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListDirectory() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ListDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDirectory(::grpc::ServerContext* /*context*/, const ::tiny_ftp::SessionID* /*request*/, ::tiny_ftp::Directory* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetWorkingDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetWorkingDirectory() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetWorkingDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWorkingDirectory(::grpc::ServerContext* /*context*/, const ::tiny_ftp::SessionID* /*request*/, ::tiny_ftp::Path* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ChangeWorkingDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ChangeWorkingDirectory() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ChangeWorkingDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeWorkingDirectory(::grpc::ServerContext* /*context*/, const ::tiny_ftp::ChangeInfo* /*request*/, ::tiny_ftp::FtpStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DownloadSmallFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DownloadSmallFile() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_DownloadSmallFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadSmallFile(::grpc::ServerContext* /*context*/, const ::tiny_ftp::ChangeInfo* /*request*/, ::tiny_ftp::FileChunk* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UploadSmallFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UploadSmallFile() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_UploadSmallFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadSmallFile(::grpc::ServerContext* /*context*/, const ::tiny_ftp::FileInfo* /*request*/, ::tiny_ftp::FtpStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Login() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::tiny_ftp::User* /*request*/, ::tiny_ftp::SessionID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogin(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Logout() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logout(::grpc::ServerContext* /*context*/, const ::tiny_ftp::SessionID* /*request*/, ::tiny_ftp::FtpStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLogout(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListDirectory() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ListDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDirectory(::grpc::ServerContext* /*context*/, const ::tiny_ftp::SessionID* /*request*/, ::tiny_ftp::Directory* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListDirectory(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetWorkingDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetWorkingDirectory() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetWorkingDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWorkingDirectory(::grpc::ServerContext* /*context*/, const ::tiny_ftp::SessionID* /*request*/, ::tiny_ftp::Path* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWorkingDirectory(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ChangeWorkingDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ChangeWorkingDirectory() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ChangeWorkingDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeWorkingDirectory(::grpc::ServerContext* /*context*/, const ::tiny_ftp::ChangeInfo* /*request*/, ::tiny_ftp::FtpStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChangeWorkingDirectory(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DownloadSmallFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DownloadSmallFile() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_DownloadSmallFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadSmallFile(::grpc::ServerContext* /*context*/, const ::tiny_ftp::ChangeInfo* /*request*/, ::tiny_ftp::FileChunk* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDownloadSmallFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UploadSmallFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UploadSmallFile() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_UploadSmallFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadSmallFile(::grpc::ServerContext* /*context*/, const ::tiny_ftp::FileInfo* /*request*/, ::tiny_ftp::FtpStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUploadSmallFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Login() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Login(context, request, response); }));
    }
    ~WithRawCallbackMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::tiny_ftp::User* /*request*/, ::tiny_ftp::SessionID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Login(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Logout() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Logout(context, request, response); }));
    }
    ~WithRawCallbackMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Logout(::grpc::ServerContext* /*context*/, const ::tiny_ftp::SessionID* /*request*/, ::tiny_ftp::FtpStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Logout(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListDirectory() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListDirectory(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListDirectory(::grpc::ServerContext* /*context*/, const ::tiny_ftp::SessionID* /*request*/, ::tiny_ftp::Directory* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListDirectory(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetWorkingDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetWorkingDirectory() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetWorkingDirectory(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetWorkingDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWorkingDirectory(::grpc::ServerContext* /*context*/, const ::tiny_ftp::SessionID* /*request*/, ::tiny_ftp::Path* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetWorkingDirectory(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ChangeWorkingDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ChangeWorkingDirectory() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ChangeWorkingDirectory(context, request, response); }));
    }
    ~WithRawCallbackMethod_ChangeWorkingDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChangeWorkingDirectory(::grpc::ServerContext* /*context*/, const ::tiny_ftp::ChangeInfo* /*request*/, ::tiny_ftp::FtpStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ChangeWorkingDirectory(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DownloadSmallFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DownloadSmallFile() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DownloadSmallFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_DownloadSmallFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DownloadSmallFile(::grpc::ServerContext* /*context*/, const ::tiny_ftp::ChangeInfo* /*request*/, ::tiny_ftp::FileChunk* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DownloadSmallFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UploadSmallFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UploadSmallFile() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UploadSmallFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_UploadSmallFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadSmallFile(::grpc::ServerContext* /*context*/, const ::tiny_ftp::FileInfo* /*request*/, ::tiny_ftp::FtpStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UploadSmallFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Login() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tiny_ftp::User, ::tiny_ftp::SessionID>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tiny_ftp::User, ::tiny_ftp::SessionID>* streamer) {
                       return this->StreamedLogin(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Login(::grpc::ServerContext* /*context*/, const ::tiny_ftp::User* /*request*/, ::tiny_ftp::SessionID* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tiny_ftp::User,::tiny_ftp::SessionID>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Logout() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tiny_ftp::SessionID, ::tiny_ftp::FtpStatus>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tiny_ftp::SessionID, ::tiny_ftp::FtpStatus>* streamer) {
                       return this->StreamedLogout(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Logout(::grpc::ServerContext* /*context*/, const ::tiny_ftp::SessionID* /*request*/, ::tiny_ftp::FtpStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLogout(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tiny_ftp::SessionID,::tiny_ftp::FtpStatus>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListDirectory() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tiny_ftp::SessionID, ::tiny_ftp::Directory>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tiny_ftp::SessionID, ::tiny_ftp::Directory>* streamer) {
                       return this->StreamedListDirectory(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListDirectory(::grpc::ServerContext* /*context*/, const ::tiny_ftp::SessionID* /*request*/, ::tiny_ftp::Directory* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListDirectory(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tiny_ftp::SessionID,::tiny_ftp::Directory>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetWorkingDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetWorkingDirectory() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tiny_ftp::SessionID, ::tiny_ftp::Path>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tiny_ftp::SessionID, ::tiny_ftp::Path>* streamer) {
                       return this->StreamedGetWorkingDirectory(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetWorkingDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetWorkingDirectory(::grpc::ServerContext* /*context*/, const ::tiny_ftp::SessionID* /*request*/, ::tiny_ftp::Path* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetWorkingDirectory(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tiny_ftp::SessionID,::tiny_ftp::Path>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ChangeWorkingDirectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ChangeWorkingDirectory() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tiny_ftp::ChangeInfo, ::tiny_ftp::FtpStatus>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tiny_ftp::ChangeInfo, ::tiny_ftp::FtpStatus>* streamer) {
                       return this->StreamedChangeWorkingDirectory(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ChangeWorkingDirectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ChangeWorkingDirectory(::grpc::ServerContext* /*context*/, const ::tiny_ftp::ChangeInfo* /*request*/, ::tiny_ftp::FtpStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedChangeWorkingDirectory(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tiny_ftp::ChangeInfo,::tiny_ftp::FtpStatus>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DownloadSmallFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DownloadSmallFile() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tiny_ftp::ChangeInfo, ::tiny_ftp::FileChunk>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tiny_ftp::ChangeInfo, ::tiny_ftp::FileChunk>* streamer) {
                       return this->StreamedDownloadSmallFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DownloadSmallFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DownloadSmallFile(::grpc::ServerContext* /*context*/, const ::tiny_ftp::ChangeInfo* /*request*/, ::tiny_ftp::FileChunk* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDownloadSmallFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tiny_ftp::ChangeInfo,::tiny_ftp::FileChunk>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UploadSmallFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UploadSmallFile() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tiny_ftp::FileInfo, ::tiny_ftp::FtpStatus>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tiny_ftp::FileInfo, ::tiny_ftp::FtpStatus>* streamer) {
                       return this->StreamedUploadSmallFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UploadSmallFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UploadSmallFile(::grpc::ServerContext* /*context*/, const ::tiny_ftp::FileInfo* /*request*/, ::tiny_ftp::FtpStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUploadSmallFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tiny_ftp::FileInfo,::tiny_ftp::FtpStatus>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Login<WithStreamedUnaryMethod_Logout<WithStreamedUnaryMethod_ListDirectory<WithStreamedUnaryMethod_GetWorkingDirectory<WithStreamedUnaryMethod_ChangeWorkingDirectory<WithStreamedUnaryMethod_DownloadSmallFile<WithStreamedUnaryMethod_UploadSmallFile<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Login<WithStreamedUnaryMethod_Logout<WithStreamedUnaryMethod_ListDirectory<WithStreamedUnaryMethod_GetWorkingDirectory<WithStreamedUnaryMethod_ChangeWorkingDirectory<WithStreamedUnaryMethod_DownloadSmallFile<WithStreamedUnaryMethod_UploadSmallFile<Service > > > > > > > StreamedService;
};

}  // namespace tiny_ftp


#endif  // GRPC_tiny_5fftp_2eproto__INCLUDED
