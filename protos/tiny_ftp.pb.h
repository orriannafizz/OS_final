// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tiny_ftp.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tiny_5fftp_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tiny_5fftp_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tiny_5fftp_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tiny_5fftp_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tiny_5fftp_2eproto;
namespace tiny_ftp {
class ChangeInfo;
struct ChangeInfoDefaultTypeInternal;
extern ChangeInfoDefaultTypeInternal _ChangeInfo_default_instance_;
class DEntry;
struct DEntryDefaultTypeInternal;
extern DEntryDefaultTypeInternal _DEntry_default_instance_;
class Directory;
struct DirectoryDefaultTypeInternal;
extern DirectoryDefaultTypeInternal _Directory_default_instance_;
class FileChunk;
struct FileChunkDefaultTypeInternal;
extern FileChunkDefaultTypeInternal _FileChunk_default_instance_;
class FileInfo;
struct FileInfoDefaultTypeInternal;
extern FileInfoDefaultTypeInternal _FileInfo_default_instance_;
class FtpStatus;
struct FtpStatusDefaultTypeInternal;
extern FtpStatusDefaultTypeInternal _FtpStatus_default_instance_;
class Path;
struct PathDefaultTypeInternal;
extern PathDefaultTypeInternal _Path_default_instance_;
class SessionID;
struct SessionIDDefaultTypeInternal;
extern SessionIDDefaultTypeInternal _SessionID_default_instance_;
class User;
struct UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
}  // namespace tiny_ftp
PROTOBUF_NAMESPACE_OPEN
template<> ::tiny_ftp::ChangeInfo* Arena::CreateMaybeMessage<::tiny_ftp::ChangeInfo>(Arena*);
template<> ::tiny_ftp::DEntry* Arena::CreateMaybeMessage<::tiny_ftp::DEntry>(Arena*);
template<> ::tiny_ftp::Directory* Arena::CreateMaybeMessage<::tiny_ftp::Directory>(Arena*);
template<> ::tiny_ftp::FileChunk* Arena::CreateMaybeMessage<::tiny_ftp::FileChunk>(Arena*);
template<> ::tiny_ftp::FileInfo* Arena::CreateMaybeMessage<::tiny_ftp::FileInfo>(Arena*);
template<> ::tiny_ftp::FtpStatus* Arena::CreateMaybeMessage<::tiny_ftp::FtpStatus>(Arena*);
template<> ::tiny_ftp::Path* Arena::CreateMaybeMessage<::tiny_ftp::Path>(Arena*);
template<> ::tiny_ftp::SessionID* Arena::CreateMaybeMessage<::tiny_ftp::SessionID>(Arena*);
template<> ::tiny_ftp::User* Arena::CreateMaybeMessage<::tiny_ftp::User>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tiny_ftp {

enum DEntry_PathType : int {
  DEntry_PathType_FILE = 0,
  DEntry_PathType_DIRECTORY = 1
};
bool DEntry_PathType_IsValid(int value);
constexpr DEntry_PathType DEntry_PathType_PathType_MIN = DEntry_PathType_FILE;
constexpr DEntry_PathType DEntry_PathType_PathType_MAX = DEntry_PathType_DIRECTORY;
constexpr int DEntry_PathType_PathType_ARRAYSIZE = DEntry_PathType_PathType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DEntry_PathType_descriptor();
template<typename T>
inline const std::string& DEntry_PathType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DEntry_PathType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DEntry_PathType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DEntry_PathType_descriptor(), enum_t_value);
}
inline bool DEntry_PathType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DEntry_PathType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DEntry_PathType>(
    DEntry_PathType_descriptor(), name, value);
}
// ===================================================================

class User final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tiny_ftp.User) */ {
 public:
  inline User() : User(nullptr) {}
  ~User() override;
  explicit PROTOBUF_CONSTEXPR User(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  User(const User& from);
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  inline User& operator=(User&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User& default_instance() {
    return *internal_default_instance();
  }
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }
  inline void Swap(User* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const User& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const User& from) {
    User::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tiny_ftp.User";
  }
  protected:
  explicit User(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPwdFieldNumber = 2,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required string pwd = 2;
  bool has_pwd() const;
  private:
  bool _internal_has_pwd() const;
  public:
  void clear_pwd();
  const std::string& pwd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pwd(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pwd();
  PROTOBUF_NODISCARD std::string* release_pwd();
  void set_allocated_pwd(std::string* pwd);
  private:
  const std::string& _internal_pwd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pwd(const std::string& value);
  std::string* _internal_mutable_pwd();
  public:

  // @@protoc_insertion_point(class_scope:tiny_ftp.User)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pwd_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tiny_5fftp_2eproto;
};
// -------------------------------------------------------------------

class FtpStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tiny_ftp.FtpStatus) */ {
 public:
  inline FtpStatus() : FtpStatus(nullptr) {}
  ~FtpStatus() override;
  explicit PROTOBUF_CONSTEXPR FtpStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FtpStatus(const FtpStatus& from);
  FtpStatus(FtpStatus&& from) noexcept
    : FtpStatus() {
    *this = ::std::move(from);
  }

  inline FtpStatus& operator=(const FtpStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline FtpStatus& operator=(FtpStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FtpStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const FtpStatus* internal_default_instance() {
    return reinterpret_cast<const FtpStatus*>(
               &_FtpStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FtpStatus& a, FtpStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(FtpStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FtpStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FtpStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FtpStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FtpStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FtpStatus& from) {
    FtpStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FtpStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tiny_ftp.FtpStatus";
  }
  protected:
  explicit FtpStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
  };
  // required int32 code = 1;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  int32_t code() const;
  void set_code(int32_t value);
  private:
  int32_t _internal_code() const;
  void _internal_set_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tiny_ftp.FtpStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t code_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tiny_5fftp_2eproto;
};
// -------------------------------------------------------------------

class SessionID final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tiny_ftp.SessionID) */ {
 public:
  inline SessionID() : SessionID(nullptr) {}
  ~SessionID() override;
  explicit PROTOBUF_CONSTEXPR SessionID(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SessionID(const SessionID& from);
  SessionID(SessionID&& from) noexcept
    : SessionID() {
    *this = ::std::move(from);
  }

  inline SessionID& operator=(const SessionID& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionID& operator=(SessionID&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SessionID& default_instance() {
    return *internal_default_instance();
  }
  static inline const SessionID* internal_default_instance() {
    return reinterpret_cast<const SessionID*>(
               &_SessionID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SessionID& a, SessionID& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionID* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SessionID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SessionID>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SessionID& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SessionID& from) {
    SessionID::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionID* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tiny_ftp.SessionID";
  }
  protected:
  explicit SessionID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // required bytes id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:tiny_ftp.SessionID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tiny_5fftp_2eproto;
};
// -------------------------------------------------------------------

class DEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tiny_ftp.DEntry) */ {
 public:
  inline DEntry() : DEntry(nullptr) {}
  ~DEntry() override;
  explicit PROTOBUF_CONSTEXPR DEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DEntry(const DEntry& from);
  DEntry(DEntry&& from) noexcept
    : DEntry() {
    *this = ::std::move(from);
  }

  inline DEntry& operator=(const DEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline DEntry& operator=(DEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const DEntry* internal_default_instance() {
    return reinterpret_cast<const DEntry*>(
               &_DEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DEntry& a, DEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(DEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DEntry& from) {
    DEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tiny_ftp.DEntry";
  }
  protected:
  explicit DEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DEntry_PathType PathType;
  static constexpr PathType FILE =
    DEntry_PathType_FILE;
  static constexpr PathType DIRECTORY =
    DEntry_PathType_DIRECTORY;
  static inline bool PathType_IsValid(int value) {
    return DEntry_PathType_IsValid(value);
  }
  static constexpr PathType PathType_MIN =
    DEntry_PathType_PathType_MIN;
  static constexpr PathType PathType_MAX =
    DEntry_PathType_PathType_MAX;
  static constexpr int PathType_ARRAYSIZE =
    DEntry_PathType_PathType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PathType_descriptor() {
    return DEntry_PathType_descriptor();
  }
  template<typename T>
  static inline const std::string& PathType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PathType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PathType_Name.");
    return DEntry_PathType_Name(enum_t_value);
  }
  static inline bool PathType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PathType* value) {
    return DEntry_PathType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSizeFieldNumber = 3,
    kTypeFieldNumber = 2,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required uint64 size = 3;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  uint64_t size() const;
  void set_size(uint64_t value);
  private:
  uint64_t _internal_size() const;
  void _internal_set_size(uint64_t value);
  public:

  // required .tiny_ftp.DEntry.PathType type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::tiny_ftp::DEntry_PathType type() const;
  void set_type(::tiny_ftp::DEntry_PathType value);
  private:
  ::tiny_ftp::DEntry_PathType _internal_type() const;
  void _internal_set_type(::tiny_ftp::DEntry_PathType value);
  public:

  // @@protoc_insertion_point(class_scope:tiny_ftp.DEntry)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint64_t size_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tiny_5fftp_2eproto;
};
// -------------------------------------------------------------------

class Directory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tiny_ftp.Directory) */ {
 public:
  inline Directory() : Directory(nullptr) {}
  ~Directory() override;
  explicit PROTOBUF_CONSTEXPR Directory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Directory(const Directory& from);
  Directory(Directory&& from) noexcept
    : Directory() {
    *this = ::std::move(from);
  }

  inline Directory& operator=(const Directory& from) {
    CopyFrom(from);
    return *this;
  }
  inline Directory& operator=(Directory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Directory& default_instance() {
    return *internal_default_instance();
  }
  static inline const Directory* internal_default_instance() {
    return reinterpret_cast<const Directory*>(
               &_Directory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Directory& a, Directory& b) {
    a.Swap(&b);
  }
  inline void Swap(Directory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Directory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Directory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Directory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Directory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Directory& from) {
    Directory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Directory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tiny_ftp.Directory";
  }
  protected:
  explicit Directory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDentriesFieldNumber = 1,
  };
  // repeated .tiny_ftp.DEntry dentries = 1;
  int dentries_size() const;
  private:
  int _internal_dentries_size() const;
  public:
  void clear_dentries();
  ::tiny_ftp::DEntry* mutable_dentries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tiny_ftp::DEntry >*
      mutable_dentries();
  private:
  const ::tiny_ftp::DEntry& _internal_dentries(int index) const;
  ::tiny_ftp::DEntry* _internal_add_dentries();
  public:
  const ::tiny_ftp::DEntry& dentries(int index) const;
  ::tiny_ftp::DEntry* add_dentries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tiny_ftp::DEntry >&
      dentries() const;

  // @@protoc_insertion_point(class_scope:tiny_ftp.Directory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tiny_ftp::DEntry > dentries_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tiny_5fftp_2eproto;
};
// -------------------------------------------------------------------

class Path final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tiny_ftp.Path) */ {
 public:
  inline Path() : Path(nullptr) {}
  ~Path() override;
  explicit PROTOBUF_CONSTEXPR Path(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Path(const Path& from);
  Path(Path&& from) noexcept
    : Path() {
    *this = ::std::move(from);
  }

  inline Path& operator=(const Path& from) {
    CopyFrom(from);
    return *this;
  }
  inline Path& operator=(Path&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Path& default_instance() {
    return *internal_default_instance();
  }
  static inline const Path* internal_default_instance() {
    return reinterpret_cast<const Path*>(
               &_Path_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Path& a, Path& b) {
    a.Swap(&b);
  }
  inline void Swap(Path* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Path* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Path* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Path>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Path& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Path& from) {
    Path::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Path* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tiny_ftp.Path";
  }
  protected:
  explicit Path(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // required string path = 1;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:tiny_ftp.Path)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tiny_5fftp_2eproto;
};
// -------------------------------------------------------------------

class ChangeInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tiny_ftp.ChangeInfo) */ {
 public:
  inline ChangeInfo() : ChangeInfo(nullptr) {}
  ~ChangeInfo() override;
  explicit PROTOBUF_CONSTEXPR ChangeInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChangeInfo(const ChangeInfo& from);
  ChangeInfo(ChangeInfo&& from) noexcept
    : ChangeInfo() {
    *this = ::std::move(from);
  }

  inline ChangeInfo& operator=(const ChangeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeInfo& operator=(ChangeInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChangeInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChangeInfo* internal_default_instance() {
    return reinterpret_cast<const ChangeInfo*>(
               &_ChangeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ChangeInfo& a, ChangeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangeInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChangeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChangeInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChangeInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChangeInfo& from) {
    ChangeInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tiny_ftp.ChangeInfo";
  }
  protected:
  explicit ChangeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionidFieldNumber = 1,
    kPathFieldNumber = 2,
  };
  // required .tiny_ftp.SessionID sessionid = 1;
  bool has_sessionid() const;
  private:
  bool _internal_has_sessionid() const;
  public:
  void clear_sessionid();
  const ::tiny_ftp::SessionID& sessionid() const;
  PROTOBUF_NODISCARD ::tiny_ftp::SessionID* release_sessionid();
  ::tiny_ftp::SessionID* mutable_sessionid();
  void set_allocated_sessionid(::tiny_ftp::SessionID* sessionid);
  private:
  const ::tiny_ftp::SessionID& _internal_sessionid() const;
  ::tiny_ftp::SessionID* _internal_mutable_sessionid();
  public:
  void unsafe_arena_set_allocated_sessionid(
      ::tiny_ftp::SessionID* sessionid);
  ::tiny_ftp::SessionID* unsafe_arena_release_sessionid();

  // required .tiny_ftp.Path path = 2;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const ::tiny_ftp::Path& path() const;
  PROTOBUF_NODISCARD ::tiny_ftp::Path* release_path();
  ::tiny_ftp::Path* mutable_path();
  void set_allocated_path(::tiny_ftp::Path* path);
  private:
  const ::tiny_ftp::Path& _internal_path() const;
  ::tiny_ftp::Path* _internal_mutable_path();
  public:
  void unsafe_arena_set_allocated_path(
      ::tiny_ftp::Path* path);
  ::tiny_ftp::Path* unsafe_arena_release_path();

  // @@protoc_insertion_point(class_scope:tiny_ftp.ChangeInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::tiny_ftp::SessionID* sessionid_;
    ::tiny_ftp::Path* path_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tiny_5fftp_2eproto;
};
// -------------------------------------------------------------------

class FileChunk final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tiny_ftp.FileChunk) */ {
 public:
  inline FileChunk() : FileChunk(nullptr) {}
  ~FileChunk() override;
  explicit PROTOBUF_CONSTEXPR FileChunk(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileChunk(const FileChunk& from);
  FileChunk(FileChunk&& from) noexcept
    : FileChunk() {
    *this = ::std::move(from);
  }

  inline FileChunk& operator=(const FileChunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileChunk& operator=(FileChunk&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileChunk& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileChunk* internal_default_instance() {
    return reinterpret_cast<const FileChunk*>(
               &_FileChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(FileChunk& a, FileChunk& b) {
    a.Swap(&b);
  }
  inline void Swap(FileChunk* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileChunk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileChunk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileChunk>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileChunk& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FileChunk& from) {
    FileChunk::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileChunk* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tiny_ftp.FileChunk";
  }
  protected:
  explicit FileChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kOffsetFieldNumber = 2,
    kSizeFieldNumber = 1,
  };
  // required bytes data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // required uint64 offset = 2;
  bool has_offset() const;
  private:
  bool _internal_has_offset() const;
  public:
  void clear_offset();
  uint64_t offset() const;
  void set_offset(uint64_t value);
  private:
  uint64_t _internal_offset() const;
  void _internal_set_offset(uint64_t value);
  public:

  // required int32 size = 1;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  int32_t size() const;
  void set_size(int32_t value);
  private:
  int32_t _internal_size() const;
  void _internal_set_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tiny_ftp.FileChunk)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    uint64_t offset_;
    int32_t size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tiny_5fftp_2eproto;
};
// -------------------------------------------------------------------

class FileInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tiny_ftp.FileInfo) */ {
 public:
  inline FileInfo() : FileInfo(nullptr) {}
  ~FileInfo() override;
  explicit PROTOBUF_CONSTEXPR FileInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileInfo(const FileInfo& from);
  FileInfo(FileInfo&& from) noexcept
    : FileInfo() {
    *this = ::std::move(from);
  }

  inline FileInfo& operator=(const FileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileInfo& operator=(FileInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileInfo* internal_default_instance() {
    return reinterpret_cast<const FileInfo*>(
               &_FileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(FileInfo& a, FileInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FileInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FileInfo& from) {
    FileInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tiny_ftp.FileInfo";
  }
  protected:
  explicit FileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChangeinfoFieldNumber = 1,
    kFilechunkFieldNumber = 2,
  };
  // required .tiny_ftp.ChangeInfo changeinfo = 1;
  bool has_changeinfo() const;
  private:
  bool _internal_has_changeinfo() const;
  public:
  void clear_changeinfo();
  const ::tiny_ftp::ChangeInfo& changeinfo() const;
  PROTOBUF_NODISCARD ::tiny_ftp::ChangeInfo* release_changeinfo();
  ::tiny_ftp::ChangeInfo* mutable_changeinfo();
  void set_allocated_changeinfo(::tiny_ftp::ChangeInfo* changeinfo);
  private:
  const ::tiny_ftp::ChangeInfo& _internal_changeinfo() const;
  ::tiny_ftp::ChangeInfo* _internal_mutable_changeinfo();
  public:
  void unsafe_arena_set_allocated_changeinfo(
      ::tiny_ftp::ChangeInfo* changeinfo);
  ::tiny_ftp::ChangeInfo* unsafe_arena_release_changeinfo();

  // required .tiny_ftp.FileChunk filechunk = 2;
  bool has_filechunk() const;
  private:
  bool _internal_has_filechunk() const;
  public:
  void clear_filechunk();
  const ::tiny_ftp::FileChunk& filechunk() const;
  PROTOBUF_NODISCARD ::tiny_ftp::FileChunk* release_filechunk();
  ::tiny_ftp::FileChunk* mutable_filechunk();
  void set_allocated_filechunk(::tiny_ftp::FileChunk* filechunk);
  private:
  const ::tiny_ftp::FileChunk& _internal_filechunk() const;
  ::tiny_ftp::FileChunk* _internal_mutable_filechunk();
  public:
  void unsafe_arena_set_allocated_filechunk(
      ::tiny_ftp::FileChunk* filechunk);
  ::tiny_ftp::FileChunk* unsafe_arena_release_filechunk();

  // @@protoc_insertion_point(class_scope:tiny_ftp.FileInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::tiny_ftp::ChangeInfo* changeinfo_;
    ::tiny_ftp::FileChunk* filechunk_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tiny_5fftp_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// User

// required string name = 1;
inline bool User::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool User::has_name() const {
  return _internal_has_name();
}
inline void User::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& User::name() const {
  // @@protoc_insertion_point(field_get:tiny_ftp.User.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tiny_ftp.User.name)
}
inline std::string* User::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tiny_ftp.User.name)
  return _s;
}
inline const std::string& User::_internal_name() const {
  return _impl_.name_.Get();
}
inline void User::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* User::release_name() {
  // @@protoc_insertion_point(field_release:tiny_ftp.User.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void User::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tiny_ftp.User.name)
}

// required string pwd = 2;
inline bool User::_internal_has_pwd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool User::has_pwd() const {
  return _internal_has_pwd();
}
inline void User::clear_pwd() {
  _impl_.pwd_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& User::pwd() const {
  // @@protoc_insertion_point(field_get:tiny_ftp.User.pwd)
  return _internal_pwd();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User::set_pwd(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.pwd_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tiny_ftp.User.pwd)
}
inline std::string* User::mutable_pwd() {
  std::string* _s = _internal_mutable_pwd();
  // @@protoc_insertion_point(field_mutable:tiny_ftp.User.pwd)
  return _s;
}
inline const std::string& User::_internal_pwd() const {
  return _impl_.pwd_.Get();
}
inline void User::_internal_set_pwd(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.pwd_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_pwd() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.pwd_.Mutable(GetArenaForAllocation());
}
inline std::string* User::release_pwd() {
  // @@protoc_insertion_point(field_release:tiny_ftp.User.pwd)
  if (!_internal_has_pwd()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.pwd_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pwd_.IsDefault()) {
    _impl_.pwd_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void User::set_allocated_pwd(std::string* pwd) {
  if (pwd != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.pwd_.SetAllocated(pwd, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pwd_.IsDefault()) {
    _impl_.pwd_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tiny_ftp.User.pwd)
}

// -------------------------------------------------------------------

// FtpStatus

// required int32 code = 1;
inline bool FtpStatus::_internal_has_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FtpStatus::has_code() const {
  return _internal_has_code();
}
inline void FtpStatus::clear_code() {
  _impl_.code_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t FtpStatus::_internal_code() const {
  return _impl_.code_;
}
inline int32_t FtpStatus::code() const {
  // @@protoc_insertion_point(field_get:tiny_ftp.FtpStatus.code)
  return _internal_code();
}
inline void FtpStatus::_internal_set_code(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.code_ = value;
}
inline void FtpStatus::set_code(int32_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:tiny_ftp.FtpStatus.code)
}

// -------------------------------------------------------------------

// SessionID

// required bytes id = 1;
inline bool SessionID::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SessionID::has_id() const {
  return _internal_has_id();
}
inline void SessionID::clear_id() {
  _impl_.id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SessionID::id() const {
  // @@protoc_insertion_point(field_get:tiny_ftp.SessionID.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SessionID::set_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.id_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tiny_ftp.SessionID.id)
}
inline std::string* SessionID::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:tiny_ftp.SessionID.id)
  return _s;
}
inline const std::string& SessionID::_internal_id() const {
  return _impl_.id_.Get();
}
inline void SessionID::_internal_set_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* SessionID::_internal_mutable_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* SessionID::release_id() {
  // @@protoc_insertion_point(field_release:tiny_ftp.SessionID.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SessionID::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tiny_ftp.SessionID.id)
}

// -------------------------------------------------------------------

// DEntry

// required string name = 1;
inline bool DEntry::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DEntry::has_name() const {
  return _internal_has_name();
}
inline void DEntry::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DEntry::name() const {
  // @@protoc_insertion_point(field_get:tiny_ftp.DEntry.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DEntry::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tiny_ftp.DEntry.name)
}
inline std::string* DEntry::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tiny_ftp.DEntry.name)
  return _s;
}
inline const std::string& DEntry::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DEntry::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DEntry::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DEntry::release_name() {
  // @@protoc_insertion_point(field_release:tiny_ftp.DEntry.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DEntry::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tiny_ftp.DEntry.name)
}

// required .tiny_ftp.DEntry.PathType type = 2;
inline bool DEntry::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DEntry::has_type() const {
  return _internal_has_type();
}
inline void DEntry::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::tiny_ftp::DEntry_PathType DEntry::_internal_type() const {
  return static_cast< ::tiny_ftp::DEntry_PathType >(_impl_.type_);
}
inline ::tiny_ftp::DEntry_PathType DEntry::type() const {
  // @@protoc_insertion_point(field_get:tiny_ftp.DEntry.type)
  return _internal_type();
}
inline void DEntry::_internal_set_type(::tiny_ftp::DEntry_PathType value) {
  assert(::tiny_ftp::DEntry_PathType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.type_ = value;
}
inline void DEntry::set_type(::tiny_ftp::DEntry_PathType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:tiny_ftp.DEntry.type)
}

// required uint64 size = 3;
inline bool DEntry::_internal_has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DEntry::has_size() const {
  return _internal_has_size();
}
inline void DEntry::clear_size() {
  _impl_.size_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t DEntry::_internal_size() const {
  return _impl_.size_;
}
inline uint64_t DEntry::size() const {
  // @@protoc_insertion_point(field_get:tiny_ftp.DEntry.size)
  return _internal_size();
}
inline void DEntry::_internal_set_size(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.size_ = value;
}
inline void DEntry::set_size(uint64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:tiny_ftp.DEntry.size)
}

// -------------------------------------------------------------------

// Directory

// repeated .tiny_ftp.DEntry dentries = 1;
inline int Directory::_internal_dentries_size() const {
  return _impl_.dentries_.size();
}
inline int Directory::dentries_size() const {
  return _internal_dentries_size();
}
inline void Directory::clear_dentries() {
  _impl_.dentries_.Clear();
}
inline ::tiny_ftp::DEntry* Directory::mutable_dentries(int index) {
  // @@protoc_insertion_point(field_mutable:tiny_ftp.Directory.dentries)
  return _impl_.dentries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tiny_ftp::DEntry >*
Directory::mutable_dentries() {
  // @@protoc_insertion_point(field_mutable_list:tiny_ftp.Directory.dentries)
  return &_impl_.dentries_;
}
inline const ::tiny_ftp::DEntry& Directory::_internal_dentries(int index) const {
  return _impl_.dentries_.Get(index);
}
inline const ::tiny_ftp::DEntry& Directory::dentries(int index) const {
  // @@protoc_insertion_point(field_get:tiny_ftp.Directory.dentries)
  return _internal_dentries(index);
}
inline ::tiny_ftp::DEntry* Directory::_internal_add_dentries() {
  return _impl_.dentries_.Add();
}
inline ::tiny_ftp::DEntry* Directory::add_dentries() {
  ::tiny_ftp::DEntry* _add = _internal_add_dentries();
  // @@protoc_insertion_point(field_add:tiny_ftp.Directory.dentries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tiny_ftp::DEntry >&
Directory::dentries() const {
  // @@protoc_insertion_point(field_list:tiny_ftp.Directory.dentries)
  return _impl_.dentries_;
}

// -------------------------------------------------------------------

// Path

// required string path = 1;
inline bool Path::_internal_has_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Path::has_path() const {
  return _internal_has_path();
}
inline void Path::clear_path() {
  _impl_.path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Path::path() const {
  // @@protoc_insertion_point(field_get:tiny_ftp.Path.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Path::set_path(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tiny_ftp.Path.path)
}
inline std::string* Path::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:tiny_ftp.Path.path)
  return _s;
}
inline const std::string& Path::_internal_path() const {
  return _impl_.path_.Get();
}
inline void Path::_internal_set_path(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* Path::_internal_mutable_path() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.path_.Mutable(GetArenaForAllocation());
}
inline std::string* Path::release_path() {
  // @@protoc_insertion_point(field_release:tiny_ftp.Path.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.path_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Path::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.path_.SetAllocated(path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tiny_ftp.Path.path)
}

// -------------------------------------------------------------------

// ChangeInfo

// required .tiny_ftp.SessionID sessionid = 1;
inline bool ChangeInfo::_internal_has_sessionid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sessionid_ != nullptr);
  return value;
}
inline bool ChangeInfo::has_sessionid() const {
  return _internal_has_sessionid();
}
inline void ChangeInfo::clear_sessionid() {
  if (_impl_.sessionid_ != nullptr) _impl_.sessionid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tiny_ftp::SessionID& ChangeInfo::_internal_sessionid() const {
  const ::tiny_ftp::SessionID* p = _impl_.sessionid_;
  return p != nullptr ? *p : reinterpret_cast<const ::tiny_ftp::SessionID&>(
      ::tiny_ftp::_SessionID_default_instance_);
}
inline const ::tiny_ftp::SessionID& ChangeInfo::sessionid() const {
  // @@protoc_insertion_point(field_get:tiny_ftp.ChangeInfo.sessionid)
  return _internal_sessionid();
}
inline void ChangeInfo::unsafe_arena_set_allocated_sessionid(
    ::tiny_ftp::SessionID* sessionid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sessionid_);
  }
  _impl_.sessionid_ = sessionid;
  if (sessionid) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tiny_ftp.ChangeInfo.sessionid)
}
inline ::tiny_ftp::SessionID* ChangeInfo::release_sessionid() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tiny_ftp::SessionID* temp = _impl_.sessionid_;
  _impl_.sessionid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tiny_ftp::SessionID* ChangeInfo::unsafe_arena_release_sessionid() {
  // @@protoc_insertion_point(field_release:tiny_ftp.ChangeInfo.sessionid)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tiny_ftp::SessionID* temp = _impl_.sessionid_;
  _impl_.sessionid_ = nullptr;
  return temp;
}
inline ::tiny_ftp::SessionID* ChangeInfo::_internal_mutable_sessionid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.sessionid_ == nullptr) {
    auto* p = CreateMaybeMessage<::tiny_ftp::SessionID>(GetArenaForAllocation());
    _impl_.sessionid_ = p;
  }
  return _impl_.sessionid_;
}
inline ::tiny_ftp::SessionID* ChangeInfo::mutable_sessionid() {
  ::tiny_ftp::SessionID* _msg = _internal_mutable_sessionid();
  // @@protoc_insertion_point(field_mutable:tiny_ftp.ChangeInfo.sessionid)
  return _msg;
}
inline void ChangeInfo::set_allocated_sessionid(::tiny_ftp::SessionID* sessionid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.sessionid_;
  }
  if (sessionid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sessionid);
    if (message_arena != submessage_arena) {
      sessionid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sessionid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.sessionid_ = sessionid;
  // @@protoc_insertion_point(field_set_allocated:tiny_ftp.ChangeInfo.sessionid)
}

// required .tiny_ftp.Path path = 2;
inline bool ChangeInfo::_internal_has_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.path_ != nullptr);
  return value;
}
inline bool ChangeInfo::has_path() const {
  return _internal_has_path();
}
inline void ChangeInfo::clear_path() {
  if (_impl_.path_ != nullptr) _impl_.path_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::tiny_ftp::Path& ChangeInfo::_internal_path() const {
  const ::tiny_ftp::Path* p = _impl_.path_;
  return p != nullptr ? *p : reinterpret_cast<const ::tiny_ftp::Path&>(
      ::tiny_ftp::_Path_default_instance_);
}
inline const ::tiny_ftp::Path& ChangeInfo::path() const {
  // @@protoc_insertion_point(field_get:tiny_ftp.ChangeInfo.path)
  return _internal_path();
}
inline void ChangeInfo::unsafe_arena_set_allocated_path(
    ::tiny_ftp::Path* path) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.path_);
  }
  _impl_.path_ = path;
  if (path) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tiny_ftp.ChangeInfo.path)
}
inline ::tiny_ftp::Path* ChangeInfo::release_path() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tiny_ftp::Path* temp = _impl_.path_;
  _impl_.path_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tiny_ftp::Path* ChangeInfo::unsafe_arena_release_path() {
  // @@protoc_insertion_point(field_release:tiny_ftp.ChangeInfo.path)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tiny_ftp::Path* temp = _impl_.path_;
  _impl_.path_ = nullptr;
  return temp;
}
inline ::tiny_ftp::Path* ChangeInfo::_internal_mutable_path() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.path_ == nullptr) {
    auto* p = CreateMaybeMessage<::tiny_ftp::Path>(GetArenaForAllocation());
    _impl_.path_ = p;
  }
  return _impl_.path_;
}
inline ::tiny_ftp::Path* ChangeInfo::mutable_path() {
  ::tiny_ftp::Path* _msg = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:tiny_ftp.ChangeInfo.path)
  return _msg;
}
inline void ChangeInfo::set_allocated_path(::tiny_ftp::Path* path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.path_;
  }
  if (path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(path);
    if (message_arena != submessage_arena) {
      path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, path, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.path_ = path;
  // @@protoc_insertion_point(field_set_allocated:tiny_ftp.ChangeInfo.path)
}

// -------------------------------------------------------------------

// FileChunk

// required int32 size = 1;
inline bool FileChunk::_internal_has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FileChunk::has_size() const {
  return _internal_has_size();
}
inline void FileChunk::clear_size() {
  _impl_.size_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t FileChunk::_internal_size() const {
  return _impl_.size_;
}
inline int32_t FileChunk::size() const {
  // @@protoc_insertion_point(field_get:tiny_ftp.FileChunk.size)
  return _internal_size();
}
inline void FileChunk::_internal_set_size(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.size_ = value;
}
inline void FileChunk::set_size(int32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:tiny_ftp.FileChunk.size)
}

// required uint64 offset = 2;
inline bool FileChunk::_internal_has_offset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FileChunk::has_offset() const {
  return _internal_has_offset();
}
inline void FileChunk::clear_offset() {
  _impl_.offset_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t FileChunk::_internal_offset() const {
  return _impl_.offset_;
}
inline uint64_t FileChunk::offset() const {
  // @@protoc_insertion_point(field_get:tiny_ftp.FileChunk.offset)
  return _internal_offset();
}
inline void FileChunk::_internal_set_offset(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.offset_ = value;
}
inline void FileChunk::set_offset(uint64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:tiny_ftp.FileChunk.offset)
}

// required bytes data = 3;
inline bool FileChunk::_internal_has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FileChunk::has_data() const {
  return _internal_has_data();
}
inline void FileChunk::clear_data() {
  _impl_.data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FileChunk::data() const {
  // @@protoc_insertion_point(field_get:tiny_ftp.FileChunk.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileChunk::set_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tiny_ftp.FileChunk.data)
}
inline std::string* FileChunk::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:tiny_ftp.FileChunk.data)
  return _s;
}
inline const std::string& FileChunk::_internal_data() const {
  return _impl_.data_.Get();
}
inline void FileChunk::_internal_set_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* FileChunk::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* FileChunk::release_data() {
  // @@protoc_insertion_point(field_release:tiny_ftp.FileChunk.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FileChunk::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tiny_ftp.FileChunk.data)
}

// -------------------------------------------------------------------

// FileInfo

// required .tiny_ftp.ChangeInfo changeinfo = 1;
inline bool FileInfo::_internal_has_changeinfo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.changeinfo_ != nullptr);
  return value;
}
inline bool FileInfo::has_changeinfo() const {
  return _internal_has_changeinfo();
}
inline void FileInfo::clear_changeinfo() {
  if (_impl_.changeinfo_ != nullptr) _impl_.changeinfo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tiny_ftp::ChangeInfo& FileInfo::_internal_changeinfo() const {
  const ::tiny_ftp::ChangeInfo* p = _impl_.changeinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::tiny_ftp::ChangeInfo&>(
      ::tiny_ftp::_ChangeInfo_default_instance_);
}
inline const ::tiny_ftp::ChangeInfo& FileInfo::changeinfo() const {
  // @@protoc_insertion_point(field_get:tiny_ftp.FileInfo.changeinfo)
  return _internal_changeinfo();
}
inline void FileInfo::unsafe_arena_set_allocated_changeinfo(
    ::tiny_ftp::ChangeInfo* changeinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.changeinfo_);
  }
  _impl_.changeinfo_ = changeinfo;
  if (changeinfo) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tiny_ftp.FileInfo.changeinfo)
}
inline ::tiny_ftp::ChangeInfo* FileInfo::release_changeinfo() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tiny_ftp::ChangeInfo* temp = _impl_.changeinfo_;
  _impl_.changeinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tiny_ftp::ChangeInfo* FileInfo::unsafe_arena_release_changeinfo() {
  // @@protoc_insertion_point(field_release:tiny_ftp.FileInfo.changeinfo)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tiny_ftp::ChangeInfo* temp = _impl_.changeinfo_;
  _impl_.changeinfo_ = nullptr;
  return temp;
}
inline ::tiny_ftp::ChangeInfo* FileInfo::_internal_mutable_changeinfo() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.changeinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::tiny_ftp::ChangeInfo>(GetArenaForAllocation());
    _impl_.changeinfo_ = p;
  }
  return _impl_.changeinfo_;
}
inline ::tiny_ftp::ChangeInfo* FileInfo::mutable_changeinfo() {
  ::tiny_ftp::ChangeInfo* _msg = _internal_mutable_changeinfo();
  // @@protoc_insertion_point(field_mutable:tiny_ftp.FileInfo.changeinfo)
  return _msg;
}
inline void FileInfo::set_allocated_changeinfo(::tiny_ftp::ChangeInfo* changeinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.changeinfo_;
  }
  if (changeinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(changeinfo);
    if (message_arena != submessage_arena) {
      changeinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, changeinfo, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.changeinfo_ = changeinfo;
  // @@protoc_insertion_point(field_set_allocated:tiny_ftp.FileInfo.changeinfo)
}

// required .tiny_ftp.FileChunk filechunk = 2;
inline bool FileInfo::_internal_has_filechunk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.filechunk_ != nullptr);
  return value;
}
inline bool FileInfo::has_filechunk() const {
  return _internal_has_filechunk();
}
inline void FileInfo::clear_filechunk() {
  if (_impl_.filechunk_ != nullptr) _impl_.filechunk_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::tiny_ftp::FileChunk& FileInfo::_internal_filechunk() const {
  const ::tiny_ftp::FileChunk* p = _impl_.filechunk_;
  return p != nullptr ? *p : reinterpret_cast<const ::tiny_ftp::FileChunk&>(
      ::tiny_ftp::_FileChunk_default_instance_);
}
inline const ::tiny_ftp::FileChunk& FileInfo::filechunk() const {
  // @@protoc_insertion_point(field_get:tiny_ftp.FileInfo.filechunk)
  return _internal_filechunk();
}
inline void FileInfo::unsafe_arena_set_allocated_filechunk(
    ::tiny_ftp::FileChunk* filechunk) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.filechunk_);
  }
  _impl_.filechunk_ = filechunk;
  if (filechunk) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tiny_ftp.FileInfo.filechunk)
}
inline ::tiny_ftp::FileChunk* FileInfo::release_filechunk() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tiny_ftp::FileChunk* temp = _impl_.filechunk_;
  _impl_.filechunk_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tiny_ftp::FileChunk* FileInfo::unsafe_arena_release_filechunk() {
  // @@protoc_insertion_point(field_release:tiny_ftp.FileInfo.filechunk)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tiny_ftp::FileChunk* temp = _impl_.filechunk_;
  _impl_.filechunk_ = nullptr;
  return temp;
}
inline ::tiny_ftp::FileChunk* FileInfo::_internal_mutable_filechunk() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.filechunk_ == nullptr) {
    auto* p = CreateMaybeMessage<::tiny_ftp::FileChunk>(GetArenaForAllocation());
    _impl_.filechunk_ = p;
  }
  return _impl_.filechunk_;
}
inline ::tiny_ftp::FileChunk* FileInfo::mutable_filechunk() {
  ::tiny_ftp::FileChunk* _msg = _internal_mutable_filechunk();
  // @@protoc_insertion_point(field_mutable:tiny_ftp.FileInfo.filechunk)
  return _msg;
}
inline void FileInfo::set_allocated_filechunk(::tiny_ftp::FileChunk* filechunk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.filechunk_;
  }
  if (filechunk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(filechunk);
    if (message_arena != submessage_arena) {
      filechunk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filechunk, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.filechunk_ = filechunk;
  // @@protoc_insertion_point(field_set_allocated:tiny_ftp.FileInfo.filechunk)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tiny_ftp

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::tiny_ftp::DEntry_PathType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tiny_ftp::DEntry_PathType>() {
  return ::tiny_ftp::DEntry_PathType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tiny_5fftp_2eproto
